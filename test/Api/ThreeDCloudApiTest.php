<?php
/**
 * ThreeDCloudApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Aspose\ThreeD\Cloud;
require_once('TestBase.php');

use \Aspose\ThreeD\Cloud\Model\SaveFormat;
use \Aspose\ThreeD\Cloud\Model\SaveOption;
use \Aspose\ThreeD\Cloud\Model\PlySaveOption;
use \Aspose\ThreeD\Cloud\Model\HtmlSaveOption;
use \Aspose\ThreeD\Cloud\Model\FileSystem;
use \Aspose\ThreeD\Cloud\Model\FileSystemType;
use \Aspose\ThreeD\Cloud\Model\ModelData;
use \Aspose\ThreeD\Cloud\Model\Transform;
use \Aspose\ThreeD\Cloud\Model\Vector3;
use \Aspose\ThreeD\Cloud\Model\Entity;
use \Aspose\ThreeD\Cloud\Model\Torus;

/**
 * ThreeDCloudApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThreeDCloudApiTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        return "OK";
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     *
     */
    public function test1()
    {

    }
        /**
     * Test case for copyFile
     *
     * Copy file.
     *
     */
    public function testCopyFile()
    {
        $threedApi = TestBase::getThreeDApi();
        $srcPath = "3DTest\Aspose.Upload.pdf";
        $destPath = "3DTest\Aspose.PHP.pdf";
        $srcStorageName = "";
        $destStorageName = "";
        $versionId = "";
        $result = $threedApi->copyFileWithHttpInfo($srcPath,$destPath,$srcStorageName,$destStorageName,$versionId);
        TestBase::PrintDebugInfo("TestUploadFile result:".$result[1]);//1 : statusCode
    }

    /**
     * Test case for copyFolder
     *
     * Copy folder.
     *
     */
    public function testCopyFolder()
    {
    }

    /**
     * Test case for createFolder
     *
     * Create the folder.
     *
     */
    public function testCreateFolder()
    {
    }

    /**
     * Test case for deleteFile
     *
     * Delete file.
     *
     */
    public function testDeleteFile()
    {
    }

    /**
     * Test case for deleteFolder
     *
     * Delete folder.
     *
     */
    public function testDeleteFolder()
    {
    }

    /**
     * Test case for deleteNodes
     *
     * Delete nodes from scene,nodes are addressed by Object Addressing Path.
     *
     */
    public function testDeleteNodes()
    {
    }

    /**
     * Test case for downloadFile
     *
     * Download file.
     *
     */

    public function testDownloadFile()
    {
        $threedApi = TestBase::getThreeDApi();
        $srcPath = "3DTest\Aspose.pdf";
        $storageName = "";
        $versionId = "";
        $result = $threedApi->downloadFile($srcPath,$storageName,$versionId);
        $this->assertGreaterThan(100, $result->getSize());
        print_r($result->getPathname());
        $localFilePath = realpath(__DIR__ . '/../..').TestBase::$localFolder .'Aspose.pdf';
        if(copy($result->getPathname(),$localFilePath))
        {
            echo 'Copy Successful!';
        }
        else
        {
            echo 'Copy Failed!';
        }
        $tmpFile = $result->getPathname();
        unset($result);
        unlink($tmpFile);
    }

    /**
     * Test case for uploadFile
     *
     * Upload file.
     *
     */
    public function testUploadFile()
    {
        $threedApi = TestBase::getThreeDApi();
        $localFilePath = realpath(__DIR__ . '/../..').TestBase::$localFolder .'Aspose.pdf';
        $storageName = "";
        $result =$threedApi->uploadFile(TestBase::$storageTestFolder,$localFilePath,$storageName);
        $json = json_decode($result);
        $this->assertNotEmpty($json->Uploaded);
        TestBase::PrintDebugInfo("TestUploadFile result:".$result);
    }
    /**
     * Test case for getDiscUsage
     *
     * Get disc usage.
     *
     */
    public function testGetDiscUsage()
    {
    }

    /**
     * Test case for getFileVersions
     *
     * Get file versions.
     *
     */
    public function testGetFileVersions()
    {
    }

    /**
     * Test case for getFilesList
     *
     * Get all files and folders within a folder.
     *
     */
    public function testGetFilesList()
    {
    }

    /**
     * Test case for moveFile
     *
     * Move file.
     *
     */
    public function testMoveFile()
    {
    }

    /**
     * Test case for moveFolder
     *
     * Move folder.
     *
     */
    public function testMoveFolder()
    {
    }

    /**
     * Test case for oAuthPost
     *
     * Get Access token.
     *
     */
    public function testOAuthPost()
    {
        $threedApi = TestBase::getThreeDApi();
        $oauthClientConfig= $threedApi->getConfig();
        $oauthClientConfig->setHost('https://api.aspose.cloud');
        $result  = $threedApi->oAuthPost(TestBase::$grantType, TestBase::$clientId, TestBase::$clientSecret);
        $json = json_decode($result);
        $this->assertNotEmpty($json->access_token);
        TestBase::PrintDebugInfo("TestOAuthPost AccessToken:".$result);
    }

    /**
     * Test case for objectExists
     *
     * Check if file or folder exists.
     *
     */
    public function testObjectExists()
    {
    }

    /**
     * Test case for postConvertByFormat
     *
     * Convert file on server to other formats with fileformat parameter.
     *
     */
    public function testPostConvertByFormat()
    {
    }

    /**
     * Test case for postConvertByOpt
     *
     * Convert file on server to other formats with saveOption parameter.
     *
     */
    public function testPostConvertByOpt()
    {
        $threedApi = TestBase::getThreeDApi();
        $name = "oaptest.pdf";
        $saveOpt = new PlySaveOption();
        $saveOpt->setSaveFormat(SaveFormat::PLY);
        $saveOpt->setFileSystem(new FileSystem());
        $saveOpt->getFileSystem()->setFileSystemType(FileSystemType::MemoryFileSystem);
        $positionComponents = array("x", "y", "z");
        $saveOpt->setPositionComponents($positionComponents);
        $newfilename = "saveasOptS.pdf";;
        $folder = "3DTest";
        $isOverwrite = "true";
        $storage = "First Storage";
        $result = $threedApi->postConvertByOpt($name, $saveOpt, $newfilename, $folder, $isOverwrite, $storage);

    }

    /**
     * Test case for postCreate
     *
     * Create new file with specified format..
     *
     */
    public function testPostCreate()
    {
    }

    /**
     * Test case for postModel
     *
     * Parametric Modeling, Create a Entity with size and located in ....
     *
     */
    public function testPostModel()
    {
        $threedApi = TestBase::getThreeDApi();
        $name = "3DTest\Aspose.Upload.pdf";
        $folder = "";
        $newformat = "pdf";
        $storage = "";
        $modeldata = new ModelData();
        $modeldata->setTransform(new Transform());
        $modeldata->getTransform()->setTranslation(new Vector3());
        $modeldata->getTransform()->getTranslation()->setX(500);
        $modeldata->getTransform()->getTranslation()->setY(500);
        $modeldata->getTransform()->getTranslation()->setZ(500);

        $modeldata->setEntity(new Entity());
        $modeldata->getEntity()->setTorus(new Torus());
        $modeldata->getEntity()->getTorus()->setRadius(10);
        $modeldata->getEntity()->getTorus()->setTube(20);
        $modeldata->getEntity()->getTorus()->setRadialSegments(10);
        $modeldata->getEntity()->getTorus()->setTubularSegments(10);
        $result = $threedApi->postModel($name,$modeldata,$newformat,$folder,$storage);
        TestBase::CheckFileExsits($result->getFilename());
    }

    /**
     * Test case for postPdfRawData
     *
     * Extract raw data(without any modification) from a password protected PDF file.
     *
     */
    public function testPostPdfRawData()
    {
    }

    /**
     * Test case for postSaveAsPart
     *
     * Convert part of the file into different format.
     *
     */
    public function testPostSaveAsPart()
    {
    }

    /**
     * Test case for postSceneToFile
     *
     * Extract and save in different format.
     *
     */
    public function testPostSceneToFile()
    {
    }

    /**
     * Test case for postTriangulateNew
     *
     * Triangulate whole file and save to the different file.
     *
     */
    public function testPostTriangulateNew()
    {
    }

    /**
     * Test case for postTriangulateOriginal
     *
     * Triangulate whole file and save to original file.
     *
     */
    public function testPostTriangulateOriginal()
    {
    }

    /**
     * Test case for postTriangulatePart
     *
     * Triangulate part of the scene(Specified by OAP) and save the scene to different file.
     *
     */
    public function testPostTriangulatePart()
    {
    }

    /**
     * Test case for storageExists
     *
     * Check if storage exists.
     *
     */
    public function testStorageExists()
    {
    }


}
