<?php
/**
 * PlySaveOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\ThreeD\Cloud\Model;
use \Aspose\ThreeD\Cloud\ObjectSerializer;

/**
 * PlySaveOption Class Doc Comment
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlySaveOption extends SaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlySaveOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'flip_coordinate' => 'bool',
        'vertex_element' => 'string',
        'position_components' => 'string[]',
        'face_element' => 'string',
        'face_property' => 'string',
        'file_content_type' => '\Aspose\ThreeD\Cloud\Model\FileContentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'flip_coordinate' => null,
        'vertex_element' => null,
        'position_components' => null,
        'face_element' => null,
        'face_property' => null,
        'file_content_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flip_coordinate' => 'FlipCoordinate',
        'vertex_element' => 'VertexElement',
        'position_components' => 'PositionComponents',
        'face_element' => 'FaceElement',
        'face_property' => 'FaceProperty',
        'file_content_type' => 'FileContentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flip_coordinate' => 'setFlipCoordinate',
        'vertex_element' => 'setVertexElement',
        'position_components' => 'setPositionComponents',
        'face_element' => 'setFaceElement',
        'face_property' => 'setFaceProperty',
        'file_content_type' => 'setFileContentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flip_coordinate' => 'getFlipCoordinate',
        'vertex_element' => 'getVertexElement',
        'position_components' => 'getPositionComponents',
        'face_element' => 'getFaceElement',
        'face_property' => 'getFaceProperty',
        'file_content_type' => 'getFileContentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['flip_coordinate'] = isset($data['flip_coordinate']) ? $data['flip_coordinate'] : null;
        $this->container['vertex_element'] = isset($data['vertex_element']) ? $data['vertex_element'] : null;
        $this->container['position_components'] = isset($data['position_components']) ? $data['position_components'] : null;
        $this->container['face_element'] = isset($data['face_element']) ? $data['face_element'] : null;
        $this->container['face_property'] = isset($data['face_property']) ? $data['face_property'] : null;
        $this->container['file_content_type'] = isset($data['file_content_type']) ? $data['file_content_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets flip_coordinate
     *
     * @return bool
     */
    public function getFlipCoordinate()
    {
        return $this->container['flip_coordinate'];
    }

    /**
     * Sets flip_coordinate
     *
     * @param bool $flip_coordinate Flip the coordinate while saving the scene, default value is true.
     *
     * @return $this
     */
    public function setFlipCoordinate($flip_coordinate)
    {
        $this->container['flip_coordinate'] = $flip_coordinate;

        return $this;
    }

    /**
     * Gets vertex_element
     *
     * @return string
     */
    public function getVertexElement()
    {
        return $this->container['vertex_element'];
    }

    /**
     * Sets vertex_element
     *
     * @param string $vertex_element The element name for the vertex data, default value is \"vertex\".
     *
     * @return $this
     */
    public function setVertexElement($vertex_element)
    {
        $this->container['vertex_element'] = $vertex_element;

        return $this;
    }

    /**
     * Gets position_components
     *
     * @return string[]
     */
    public function getPositionComponents()
    {
        return $this->container['position_components'];
    }

    /**
     * Sets position_components
     *
     * @param string[] $position_components The component names for position data, default value is (\"x\", \"y\", \"z\")
     *
     * @return $this
     */
    public function setPositionComponents($position_components)
    {
        $this->container['position_components'] = $position_components;

        return $this;
    }

    /**
     * Gets face_element
     *
     * @return string
     */
    public function getFaceElement()
    {
        return $this->container['face_element'];
    }

    /**
     * Sets face_element
     *
     * @param string $face_element The element name for the face data, default value is face.
     *
     * @return $this
     */
    public function setFaceElement($face_element)
    {
        $this->container['face_element'] = $face_element;

        return $this;
    }

    /**
     * Gets face_property
     *
     * @return string
     */
    public function getFaceProperty()
    {
        return $this->container['face_property'];
    }

    /**
     * Sets face_property
     *
     * @param string $face_property The property name for the face data, default value is vertex_index.
     *
     * @return $this
     */
    public function setFaceProperty($face_property)
    {
        $this->container['face_property'] = $face_property;

        return $this;
    }

    /**
     * Gets file_content_type
     *
     * @return \Aspose\ThreeD\Cloud\Model\FileContentType
     */
    public function getFileContentType()
    {
        return $this->container['file_content_type'];
    }

    /**
     * Sets file_content_type
     *
     * @param \Aspose\ThreeD\Cloud\Model\FileContentType $file_content_type Gets or sets  of the FileContent Style.
     *
     * @return $this
     */
    public function setFileContentType($file_content_type)
    {
        $this->container['file_content_type'] = $file_content_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


