<?php
/**
 * Discreet3DSSaveOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\ThreeD\Cloud\Model;
use \Aspose\ThreeD\Cloud\ObjectSerializer;

/**
 * Discreet3DSSaveOption Class Doc Comment
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Discreet3DSSaveOption extends SaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Discreet3DSSaveOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'export_light' => 'bool',
        'export_camera' => 'bool',
        'duplicated_name_separator' => 'string',
        'duplicated_name_counter_base' => 'int',
        'duplicated_name_counter_format' => 'string',
        'master_scale' => 'double',
        'gamma_corrected_color' => 'bool',
        'flip_coordinate_system' => 'bool',
        'high_precise_color' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'export_light' => null,
        'export_camera' => null,
        'duplicated_name_separator' => null,
        'duplicated_name_counter_base' => 'int32',
        'duplicated_name_counter_format' => null,
        'master_scale' => 'double',
        'gamma_corrected_color' => null,
        'flip_coordinate_system' => null,
        'high_precise_color' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'export_light' => 'ExportLight',
        'export_camera' => 'ExportCamera',
        'duplicated_name_separator' => 'DuplicatedNameSeparator',
        'duplicated_name_counter_base' => 'DuplicatedNameCounterBase',
        'duplicated_name_counter_format' => 'DuplicatedNameCounterFormat',
        'master_scale' => 'MasterScale',
        'gamma_corrected_color' => 'GammaCorrectedColor',
        'flip_coordinate_system' => 'FlipCoordinateSystem',
        'high_precise_color' => 'HighPreciseColor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'export_light' => 'setExportLight',
        'export_camera' => 'setExportCamera',
        'duplicated_name_separator' => 'setDuplicatedNameSeparator',
        'duplicated_name_counter_base' => 'setDuplicatedNameCounterBase',
        'duplicated_name_counter_format' => 'setDuplicatedNameCounterFormat',
        'master_scale' => 'setMasterScale',
        'gamma_corrected_color' => 'setGammaCorrectedColor',
        'flip_coordinate_system' => 'setFlipCoordinateSystem',
        'high_precise_color' => 'setHighPreciseColor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'export_light' => 'getExportLight',
        'export_camera' => 'getExportCamera',
        'duplicated_name_separator' => 'getDuplicatedNameSeparator',
        'duplicated_name_counter_base' => 'getDuplicatedNameCounterBase',
        'duplicated_name_counter_format' => 'getDuplicatedNameCounterFormat',
        'master_scale' => 'getMasterScale',
        'gamma_corrected_color' => 'getGammaCorrectedColor',
        'flip_coordinate_system' => 'getFlipCoordinateSystem',
        'high_precise_color' => 'getHighPreciseColor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['export_light'] = isset($data['export_light']) ? $data['export_light'] : null;
        $this->container['export_camera'] = isset($data['export_camera']) ? $data['export_camera'] : null;
        $this->container['duplicated_name_separator'] = isset($data['duplicated_name_separator']) ? $data['duplicated_name_separator'] : null;
        $this->container['duplicated_name_counter_base'] = isset($data['duplicated_name_counter_base']) ? $data['duplicated_name_counter_base'] : null;
        $this->container['duplicated_name_counter_format'] = isset($data['duplicated_name_counter_format']) ? $data['duplicated_name_counter_format'] : null;
        $this->container['master_scale'] = isset($data['master_scale']) ? $data['master_scale'] : null;
        $this->container['gamma_corrected_color'] = isset($data['gamma_corrected_color']) ? $data['gamma_corrected_color'] : null;
        $this->container['flip_coordinate_system'] = isset($data['flip_coordinate_system']) ? $data['flip_coordinate_system'] : null;
        $this->container['high_precise_color'] = isset($data['high_precise_color']) ? $data['high_precise_color'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets export_light
     *
     * @return bool
     */
    public function getExportLight()
    {
        return $this->container['export_light'];
    }

    /**
     * Sets export_light
     *
     * @param bool $export_light Gets or sets whether export all lights in the scene.
     *
     * @return $this
     */
    public function setExportLight($export_light)
    {
        $this->container['export_light'] = $export_light;

        return $this;
    }

    /**
     * Gets export_camera
     *
     * @return bool
     */
    public function getExportCamera()
    {
        return $this->container['export_camera'];
    }

    /**
     * Sets export_camera
     *
     * @param bool $export_camera Gets or sets whether export all cameras in the scene
     *
     * @return $this
     */
    public function setExportCamera($export_camera)
    {
        $this->container['export_camera'] = $export_camera;

        return $this;
    }

    /**
     * Gets duplicated_name_separator
     *
     * @return string
     */
    public function getDuplicatedNameSeparator()
    {
        return $this->container['duplicated_name_separator'];
    }

    /**
     * Sets duplicated_name_separator
     *
     * @param string $duplicated_name_separator The separator between object's name and the duplicated counter, default value is \"_\". When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object. For example there's two nodes named \"Box\", the first node will have a name \"Box\", and the second node will get a new name \"Box_2\" using the default configuration
     *
     * @return $this
     */
    public function setDuplicatedNameSeparator($duplicated_name_separator)
    {
        $this->container['duplicated_name_separator'] = $duplicated_name_separator;

        return $this;
    }

    /**
     * Gets duplicated_name_counter_base
     *
     * @return int
     */
    public function getDuplicatedNameCounterBase()
    {
        return $this->container['duplicated_name_counter_base'];
    }

    /**
     * Sets duplicated_name_counter_base
     *
     * @param int $duplicated_name_counter_base The counter used by generating new name for duplicated names
     *
     * @return $this
     */
    public function setDuplicatedNameCounterBase($duplicated_name_counter_base)
    {
        $this->container['duplicated_name_counter_base'] = $duplicated_name_counter_base;

        return $this;
    }

    /**
     * Gets duplicated_name_counter_format
     *
     * @return string
     */
    public function getDuplicatedNameCounterFormat()
    {
        return $this->container['duplicated_name_counter_format'];
    }

    /**
     * Sets duplicated_name_counter_format
     *
     * @param string $duplicated_name_counter_format The format of the duplicated counter, default value is empty string.
     *
     * @return $this
     */
    public function setDuplicatedNameCounterFormat($duplicated_name_counter_format)
    {
        $this->container['duplicated_name_counter_format'] = $duplicated_name_counter_format;

        return $this;
    }

    /**
     * Gets master_scale
     *
     * @return double
     */
    public function getMasterScale()
    {
        return $this->container['master_scale'];
    }

    /**
     * Sets master_scale
     *
     * @param double $master_scale Gets or sets the master scale used in exporting.
     *
     * @return $this
     */
    public function setMasterScale($master_scale)
    {
        $this->container['master_scale'] = $master_scale;

        return $this;
    }

    /**
     * Gets gamma_corrected_color
     *
     * @return bool
     */
    public function getGammaCorrectedColor()
    {
        return $this->container['gamma_corrected_color'];
    }

    /**
     * Sets gamma_corrected_color
     *
     * @param bool $gamma_corrected_color Gets or sets the GammaCorrectedColor.
     *
     * @return $this
     */
    public function setGammaCorrectedColor($gamma_corrected_color)
    {
        $this->container['gamma_corrected_color'] = $gamma_corrected_color;

        return $this;
    }

    /**
     * Gets flip_coordinate_system
     *
     * @return bool
     */
    public function getFlipCoordinateSystem()
    {
        return $this->container['flip_coordinate_system'];
    }

    /**
     * Sets flip_coordinate_system
     *
     * @param bool $flip_coordinate_system Gets or sets flip coordinate system of control points/normal during importing/exporting..
     *
     * @return $this
     */
    public function setFlipCoordinateSystem($flip_coordinate_system)
    {
        $this->container['flip_coordinate_system'] = $flip_coordinate_system;

        return $this;
    }

    /**
     * Gets high_precise_color
     *
     * @return bool
     */
    public function getHighPreciseColor()
    {
        return $this->container['high_precise_color'];
    }

    /**
     * Sets high_precise_color
     *
     * @param bool $high_precise_color Gets or sets the HighPreciseColor.
     *
     * @return $this
     */
    public function setHighPreciseColor($high_precise_color)
    {
        $this->container['high_precise_color'] = $high_precise_color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


