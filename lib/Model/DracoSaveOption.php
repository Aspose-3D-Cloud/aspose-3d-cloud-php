<?php
/**
 * DracoSaveOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\ThreeD\Cloud\Model;
use \Aspose\ThreeD\Cloud\ObjectSerializer;

/**
 * DracoSaveOption Class Doc Comment
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DracoSaveOption extends SaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DracoSaveOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'position_bits' => 'int',
        'texture_coordinate_bits' => 'int',
        'color_bits' => 'int',
        'normal_bits' => 'int',
        'compression_level' => '\Aspose\ThreeD\Cloud\Model\DracoCompressionLevel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'position_bits' => 'int32',
        'texture_coordinate_bits' => 'int32',
        'color_bits' => 'int32',
        'normal_bits' => 'int32',
        'compression_level' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'position_bits' => 'PositionBits',
        'texture_coordinate_bits' => 'TextureCoordinateBits',
        'color_bits' => 'ColorBits',
        'normal_bits' => 'NormalBits',
        'compression_level' => 'CompressionLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'position_bits' => 'setPositionBits',
        'texture_coordinate_bits' => 'setTextureCoordinateBits',
        'color_bits' => 'setColorBits',
        'normal_bits' => 'setNormalBits',
        'compression_level' => 'setCompressionLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'position_bits' => 'getPositionBits',
        'texture_coordinate_bits' => 'getTextureCoordinateBits',
        'color_bits' => 'getColorBits',
        'normal_bits' => 'getNormalBits',
        'compression_level' => 'getCompressionLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['position_bits'] = isset($data['position_bits']) ? $data['position_bits'] : null;
        $this->container['texture_coordinate_bits'] = isset($data['texture_coordinate_bits']) ? $data['texture_coordinate_bits'] : null;
        $this->container['color_bits'] = isset($data['color_bits']) ? $data['color_bits'] : null;
        $this->container['normal_bits'] = isset($data['normal_bits']) ? $data['normal_bits'] : null;
        $this->container['compression_level'] = isset($data['compression_level']) ? $data['compression_level'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets position_bits
     *
     * @return int
     */
    public function getPositionBits()
    {
        return $this->container['position_bits'];
    }

    /**
     * Sets position_bits
     *
     * @param int $position_bits Quantization bits for position, default value is 14
     *
     * @return $this
     */
    public function setPositionBits($position_bits)
    {
        $this->container['position_bits'] = $position_bits;

        return $this;
    }

    /**
     * Gets texture_coordinate_bits
     *
     * @return int
     */
    public function getTextureCoordinateBits()
    {
        return $this->container['texture_coordinate_bits'];
    }

    /**
     * Sets texture_coordinate_bits
     *
     * @param int $texture_coordinate_bits Quantization bits for texture coordinate, default value is 12
     *
     * @return $this
     */
    public function setTextureCoordinateBits($texture_coordinate_bits)
    {
        $this->container['texture_coordinate_bits'] = $texture_coordinate_bits;

        return $this;
    }

    /**
     * Gets color_bits
     *
     * @return int
     */
    public function getColorBits()
    {
        return $this->container['color_bits'];
    }

    /**
     * Sets color_bits
     *
     * @param int $color_bits Quantization bits for vertex color, default value is 10
     *
     * @return $this
     */
    public function setColorBits($color_bits)
    {
        $this->container['color_bits'] = $color_bits;

        return $this;
    }

    /**
     * Gets normal_bits
     *
     * @return int
     */
    public function getNormalBits()
    {
        return $this->container['normal_bits'];
    }

    /**
     * Sets normal_bits
     *
     * @param int $normal_bits Quantization bits for normal vectors, default value is 10
     *
     * @return $this
     */
    public function setNormalBits($normal_bits)
    {
        $this->container['normal_bits'] = $normal_bits;

        return $this;
    }

    /**
     * Gets compression_level
     *
     * @return \Aspose\ThreeD\Cloud\Model\DracoCompressionLevel
     */
    public function getCompressionLevel()
    {
        return $this->container['compression_level'];
    }

    /**
     * Sets compression_level
     *
     * @param \Aspose\ThreeD\Cloud\Model\DracoCompressionLevel $compression_level Compression level, default value is Aspose.ThreeD.Formats.DracoCompressionLevel.Standard.
     *
     * @return $this
     */
    public function setCompressionLevel($compression_level)
    {
        $this->container['compression_level'] = $compression_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


