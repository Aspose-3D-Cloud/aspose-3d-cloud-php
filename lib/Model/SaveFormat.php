<?php
/**
 * SaveFormat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\ThreeD\Cloud\Model;
use \Aspose\ThreeD\Cloud\ObjectSerializer;

/**
 * SaveFormat Class Doc Comment
 *
 * @category Class
 * @description SaveFormat type
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SaveFormat
{
    /**
     * Possible values of this enum
     */
    const AMF = 0;
    const ASE = 1;
    const Aspose3DWeb = 2;
    const Collada = 3;
    const Discreet3DS = 4;
    const Draco = 5;
    const DXF = 6;
    const FBX = 7;
    const GLTF = 8;
    const HTML = 9;
    const JT = 10;
    const Microsoft3MF = 11;
    const Obj = 12;
    const PDF = 13;
    const PLY = 14;
    const Rvm = 15;
    const STL = 16;
    const U3D = 17;
    const VRML = 18;
    const X = 19;
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::AMF,
            self::ASE,
            self::Aspose3DWeb,
            self::Collada
            self::Discreet3DS,
            self::Draco,
            self::DXF,
            self::FBX,
            self::GLTF,
            self::HTML,
            self::JT,
            self::Microsoft3MF,
            self::Obj,
            self::PDF,
            self::PLY,
            self::Rvm,
            self::STL,
            self::U3D,
            self::VRML,
            self::X,
        ];
    }
}


