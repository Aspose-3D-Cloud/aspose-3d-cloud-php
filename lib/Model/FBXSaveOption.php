<?php
/**
 * FBXSaveOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\ThreeD\Cloud\Model;
use \Aspose\ThreeD\Cloud\ObjectSerializer;

/**
 * FBXSaveOption Class Doc Comment
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FBXSaveOption extends SaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FBXSaveOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_compression' => 'bool',
        'fold_repeated_curve_data' => 'bool',
        'export_legacy_material_properties' => 'bool',
        'video_for_texture' => 'bool',
        'generate_vertex_element_material' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_compression' => null,
        'fold_repeated_curve_data' => null,
        'export_legacy_material_properties' => null,
        'video_for_texture' => null,
        'generate_vertex_element_material' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_compression' => 'EnableCompression',
        'fold_repeated_curve_data' => 'FoldRepeatedCurveData',
        'export_legacy_material_properties' => 'ExportLegacyMaterialProperties',
        'video_for_texture' => 'VideoForTexture',
        'generate_vertex_element_material' => 'GenerateVertexElementMaterial'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_compression' => 'setEnableCompression',
        'fold_repeated_curve_data' => 'setFoldRepeatedCurveData',
        'export_legacy_material_properties' => 'setExportLegacyMaterialProperties',
        'video_for_texture' => 'setVideoForTexture',
        'generate_vertex_element_material' => 'setGenerateVertexElementMaterial'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_compression' => 'getEnableCompression',
        'fold_repeated_curve_data' => 'getFoldRepeatedCurveData',
        'export_legacy_material_properties' => 'getExportLegacyMaterialProperties',
        'video_for_texture' => 'getVideoForTexture',
        'generate_vertex_element_material' => 'getGenerateVertexElementMaterial'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['enable_compression'] = isset($data['enable_compression']) ? $data['enable_compression'] : null;
        $this->container['fold_repeated_curve_data'] = isset($data['fold_repeated_curve_data']) ? $data['fold_repeated_curve_data'] : null;
        $this->container['export_legacy_material_properties'] = isset($data['export_legacy_material_properties']) ? $data['export_legacy_material_properties'] : null;
        $this->container['video_for_texture'] = isset($data['video_for_texture']) ? $data['video_for_texture'] : null;
        $this->container['generate_vertex_element_material'] = isset($data['generate_vertex_element_material']) ? $data['generate_vertex_element_material'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets enable_compression
     *
     * @return bool
     */
    public function getEnableCompression()
    {
        return $this->container['enable_compression'];
    }

    /**
     * Sets enable_compression
     *
     * @param bool $enable_compression Compression large binary data in the FBX file, default value is true
     *
     * @return $this
     */
    public function setEnableCompression($enable_compression)
    {
        $this->container['enable_compression'] = $enable_compression;

        return $this;
    }

    /**
     * Gets fold_repeated_curve_data
     *
     * @return bool
     */
    public function getFoldRepeatedCurveData()
    {
        return $this->container['fold_repeated_curve_data'];
    }

    /**
     * Sets fold_repeated_curve_data
     *
     * @param bool $fold_repeated_curve_data Gets or sets whether reuse repeated curve data by increasing last data's ref count
     *
     * @return $this
     */
    public function setFoldRepeatedCurveData($fold_repeated_curve_data)
    {
        $this->container['fold_repeated_curve_data'] = $fold_repeated_curve_data;

        return $this;
    }

    /**
     * Gets export_legacy_material_properties
     *
     * @return bool
     */
    public function getExportLegacyMaterialProperties()
    {
        return $this->container['export_legacy_material_properties'];
    }

    /**
     * Sets export_legacy_material_properties
     *
     * @param bool $export_legacy_material_properties Gets or sets whether export legacy material properties, used for back compatibility. This option is turned on by default
     *
     * @return $this
     */
    public function setExportLegacyMaterialProperties($export_legacy_material_properties)
    {
        $this->container['export_legacy_material_properties'] = $export_legacy_material_properties;

        return $this;
    }

    /**
     * Gets video_for_texture
     *
     * @return bool
     */
    public function getVideoForTexture()
    {
        return $this->container['video_for_texture'];
    }

    /**
     * Sets video_for_texture
     *
     * @param bool $video_for_texture Gets or sets whether generate a Video instance for Aspose.ThreeD.Shading.Texture when exporting as FBX.
     *
     * @return $this
     */
    public function setVideoForTexture($video_for_texture)
    {
        $this->container['video_for_texture'] = $video_for_texture;

        return $this;
    }

    /**
     * Gets generate_vertex_element_material
     *
     * @return bool
     */
    public function getGenerateVertexElementMaterial()
    {
        return $this->container['generate_vertex_element_material'];
    }

    /**
     * Sets generate_vertex_element_material
     *
     * @param bool $generate_vertex_element_material Gets or sets whether always generate a Aspose.ThreeD.Entities.VertexElementMaterial for geometries if the attached node contains materials. This is turned off by default.
     *
     * @return $this
     */
    public function setGenerateVertexElementMaterial($generate_vertex_element_material)
    {
        $this->container['generate_vertex_element_material'] = $generate_vertex_element_material;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


