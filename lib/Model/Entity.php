<?php
/**
 * Entity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\ThreeD\Cloud\Model;

use \ArrayAccess;
use \Aspose\ThreeD\Cloud\ObjectSerializer;

/**
 * Entity Class Doc Comment
 *
 * @category Class
 * @description Entity class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Entity implements  ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Entity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'box' => '\Aspose\ThreeD\Cloud\Model\Box',
        'cylinder' => '\Aspose\ThreeD\Cloud\Model\Cylinder',
        'sphere' => '\Aspose\ThreeD\Cloud\Model\Sphere',
        'torus' => '\Aspose\ThreeD\Cloud\Model\Torus',
        'plane' => '\Aspose\ThreeD\Cloud\Model\Plane'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'box' => null,
        'cylinder' => null,
        'sphere' => null,
        'torus' => null,
        'plane' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'box' => 'Box',
        'cylinder' => 'Cylinder',
        'sphere' => 'Sphere',
        'torus' => 'Torus',
        'plane' => 'Plane'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'box' => 'setBox',
        'cylinder' => 'setCylinder',
        'sphere' => 'setSphere',
        'torus' => 'setTorus',
        'plane' => 'setPlane'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'box' => 'getBox',
        'cylinder' => 'getCylinder',
        'sphere' => 'getSphere',
        'torus' => 'getTorus',
        'plane' => 'getPlane'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['box'] = isset($data['box']) ? $data['box'] : null;
        $this->container['cylinder'] = isset($data['cylinder']) ? $data['cylinder'] : null;
        $this->container['sphere'] = isset($data['sphere']) ? $data['sphere'] : null;
        $this->container['torus'] = isset($data['torus']) ? $data['torus'] : null;
        $this->container['plane'] = isset($data['plane']) ? $data['plane'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Box/Cylinder/Sphere/Torus/Plane
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets box
     *
     * @return \Aspose\ThreeD\Cloud\Model\Box
     */
    public function getBox()
    {
        return $this->container['box'];
    }

    /**
     * Sets box
     *
     * @param \Aspose\ThreeD\Cloud\Model\Box $box Gets or sets Box entity
     *
     * @return $this
     */
    public function setBox($box)
    {
        $this->container['box'] = $box;

        return $this;
    }

    /**
     * Gets cylinder
     *
     * @return \Aspose\ThreeD\Cloud\Model\Cylinder
     */
    public function getCylinder()
    {
        return $this->container['cylinder'];
    }

    /**
     * Sets cylinder
     *
     * @param \Aspose\ThreeD\Cloud\Model\Cylinder $cylinder Gets or sets Cylinder entity
     *
     * @return $this
     */
    public function setCylinder($cylinder)
    {
        $this->container['cylinder'] = $cylinder;

        return $this;
    }

    /**
     * Gets sphere
     *
     * @return \Aspose\ThreeD\Cloud\Model\Sphere
     */
    public function getSphere()
    {
        return $this->container['sphere'];
    }

    /**
     * Sets sphere
     *
     * @param \Aspose\ThreeD\Cloud\Model\Sphere $sphere Gets or sets Sphere entity
     *
     * @return $this
     */
    public function setSphere($sphere)
    {
        $this->container['sphere'] = $sphere;

        return $this;
    }

    /**
     * Gets torus
     *
     * @return \Aspose\ThreeD\Cloud\Model\Torus
     */
    public function getTorus()
    {
        return $this->container['torus'];
    }

    /**
     * Sets torus
     *
     * @param \Aspose\ThreeD\Cloud\Model\Torus $torus Gets or sets Torus entity
     *
     * @return $this
     */
    public function setTorus($torus)
    {
        $this->container['torus'] = $torus;

        return $this;
    }

    /**
     * Gets plane
     *
     * @return \Aspose\ThreeD\Cloud\Model\Plane
     */
    public function getPlane()
    {
        return $this->container['plane'];
    }

    /**
     * Sets plane
     *
     * @param \Aspose\ThreeD\Cloud\Model\Plane $plane Gets or sets Plane entity
     *
     * @return $this
     */
    public function setPlane($plane)
    {
        $this->container['plane'] = $plane;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


