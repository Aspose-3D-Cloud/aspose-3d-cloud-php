<?php
/**
 * Transform
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.3D Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\ThreeD\Cloud\Model;

use \ArrayAccess;
use \Aspose\ThreeD\Cloud\ObjectSerializer;

/**
 * Transform Class Doc Comment
 *
 * @category Class
 * @description A transform contains information that allow access to object&#39;s translate/scale/rotation or transform matrix at minimum cost This is used by local transform.
 * @package  Aspose\ThreeD\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transform implements  ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transform';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'translation' => '\Aspose\ThreeD\Cloud\Model\Vector3',
        'scale' => '\Aspose\ThreeD\Cloud\Model\Vector3',
        'pre_rotation' => '\Aspose\ThreeD\Cloud\Model\Vector3',
        'post_rotation' => '\Aspose\ThreeD\Cloud\Model\Vector3',
        'euler_angles' => '\Aspose\ThreeD\Cloud\Model\Vector3'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'translation' => null,
        'scale' => null,
        'pre_rotation' => null,
        'post_rotation' => null,
        'euler_angles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'translation' => 'Translation',
        'scale' => 'Scale',
        'pre_rotation' => 'PreRotation',
        'post_rotation' => 'PostRotation',
        'euler_angles' => 'EulerAngles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'translation' => 'setTranslation',
        'scale' => 'setScale',
        'pre_rotation' => 'setPreRotation',
        'post_rotation' => 'setPostRotation',
        'euler_angles' => 'setEulerAngles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'translation' => 'getTranslation',
        'scale' => 'getScale',
        'pre_rotation' => 'getPreRotation',
        'post_rotation' => 'getPostRotation',
        'euler_angles' => 'getEulerAngles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['translation'] = isset($data['translation']) ? $data['translation'] : null;
        $this->container['scale'] = isset($data['scale']) ? $data['scale'] : null;
        $this->container['pre_rotation'] = isset($data['pre_rotation']) ? $data['pre_rotation'] : null;
        $this->container['post_rotation'] = isset($data['post_rotation']) ? $data['post_rotation'] : null;
        $this->container['euler_angles'] = isset($data['euler_angles']) ? $data['euler_angles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets translation
     *
     * @return \Aspose\ThreeD\Cloud\Model\Vector3
     */
    public function getTranslation()
    {
        return $this->container['translation'];
    }

    /**
     * Sets translation
     *
     * @param \Aspose\ThreeD\Cloud\Model\Vector3 $translation Gets or sets the translation
     *
     * @return $this
     */
    public function setTranslation($translation)
    {
        $this->container['translation'] = $translation;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return \Aspose\ThreeD\Cloud\Model\Vector3
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param \Aspose\ThreeD\Cloud\Model\Vector3 $scale Gets or sets the scale
     *
     * @return $this
     */
    public function setScale($scale)
    {
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets pre_rotation
     *
     * @return \Aspose\ThreeD\Cloud\Model\Vector3
     */
    public function getPreRotation()
    {
        return $this->container['pre_rotation'];
    }

    /**
     * Sets pre_rotation
     *
     * @param \Aspose\ThreeD\Cloud\Model\Vector3 $pre_rotation Gets or sets the pre-rotation represented in degree
     *
     * @return $this
     */
    public function setPreRotation($pre_rotation)
    {
        $this->container['pre_rotation'] = $pre_rotation;

        return $this;
    }

    /**
     * Gets post_rotation
     *
     * @return \Aspose\ThreeD\Cloud\Model\Vector3
     */
    public function getPostRotation()
    {
        return $this->container['post_rotation'];
    }

    /**
     * Sets post_rotation
     *
     * @param \Aspose\ThreeD\Cloud\Model\Vector3 $post_rotation Gets or sets the post-rotation represented in degree
     *
     * @return $this
     */
    public function setPostRotation($post_rotation)
    {
        $this->container['post_rotation'] = $post_rotation;

        return $this;
    }

    /**
     * Gets euler_angles
     *
     * @return \Aspose\ThreeD\Cloud\Model\Vector3
     */
    public function getEulerAngles()
    {
        return $this->container['euler_angles'];
    }

    /**
     * Sets euler_angles
     *
     * @param \Aspose\ThreeD\Cloud\Model\Vector3 $euler_angles Gets or sets the rotation represented in euler angles, measured in degree
     *
     * @return $this
     */
    public function setEulerAngles($euler_angles)
    {
        $this->container['euler_angles'] = $euler_angles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


